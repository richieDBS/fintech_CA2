pragma solidity ^0.4.24;

contract LifeAssure {
    
    address owner;
    uint savings;
    bool limitBreach;
    
    constructor() public payable {
        owner = msg.sender;
        savings = msg.value;
        limitBreach = false;
    }
    
    modifier onlyOwner {
        require (msg.sender == owner);
        _;
    }
    
    modifier mustBreach {
        require (limitBreach == true);
        _;
    }
    
    address[] wallet;
    
    mapping (address => uint) cashOut;
    
    function setCashOut(address _wallet, uint _cashOut) public onlyOwner {
        wallet.push(_wallet);
        cashOut[_wallet] = _cashOut;
    }
    
    function payOut() private mustBreach {
        for (uint i=0; i<wallet.length; i++) {
            wallet[i].transfer(cashOut[wallet[i]]);
        }
    }
    
    function breach() public onlyOwner {
        limitBreach = true;
        payOut();
    }
}
